<?php

namespace App\Models;

use App\Models\Article\Category;
use App\Traits\AdvancedEloquentTrait;
use Auth;
use DB;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Image;

class Service extends Model
{
    use SoftDeletes, AdvancedEloquentTrait;

    /**
     * The database table used by the model.
     *
     * @var string
     */
    protected $table = 'services';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'title', 'url', 'perex', 'text', 'seo_title', 'seo_description',
        'seo_keywords', 'sort', 'image', 'thumbnail'
    ];

    /**
     * The attributes that are dates
     *
     * @var array
     */
    public $dates = ['deleted_at'];

    /**
     * The attributes that are set to null when the value is empty
     *
     * @var array
     */
    protected $nullIfEmpty = [
        'perex', 'text', 'image', 'image', 'thumbnail',
        'seo_title', 'seo_description', 'seo_keywords',
    ];


    /**
     * Adds +1 to view count
     */
    public function addView()
    {
        $agent = new Agent();
        if (!$agent->isRobot()) {
            $this->views++;
            $this->update();
        }
    }


    // -- NEW --


    /**
     * Sort services
     *
     * @return Serivce
     */
    public function scopeSort($query)
    {
        $query->orderBy('sort', 'ASC')
            ->orderBy('title', 'ASC');
    }


    /**
     * Relation with user
     */
    public function user()
    {
        return $this->hasOne('App\Models\User', 'id', 'user_id');
    }


    /**
     * Select only language mutations
     *
     * @param $query
     * @param mixed $language
     */
    public function scopeWhereLanguage($query, $language){
        $query->where("{$this->table}.language_id", is_scalar($language) ? $language : $language->id);
    }


    /**
     * Find service by url
     *
     * @param $url
     * @return self|null
     */
    static function findByUrl($url){
        return self::where('url', $url)->first();
    }


    /**
     * Return photogallery dir name
     *
     * @return string
     */
    public function getPhotogalleryDirAttribute(){
        return md5($this->created_at->format('Y-m-d H:i:s') . '-' . $this->id);
    }


    /**
     * Return photogallery dir name
     *
     * @return string
     */
    public function getPhotogalleryPathAttribute(){
        return public_path( config('admin.path_upload') ) . '/services/' . $this->photogallery_dir;
    }


    /**
     * Return photogallery dir name
     *
     * @return string
     */
    public function getPhotoUrlAttribute(){
        return url('/') . '/' . config('admin.path_upload') . '/services/' . $this->photogallery_dir;

    }


    /**
     * Save service
     *
     * @param array $options
     * @return bool
     */
    public function save(array $options = [])
    {

        // set sort attribute
        if(!isset($this->attributes['sort']) || !$this->attributes['sort'] || $this->attributes['sort'] < 1){
            $highestSortService = Service::whereLanguage($this->language_id)
                ->sort()->first();
            $this->attributes['sort'] = $highestSortService ? $highestSortService->sort + 1 : 1;
        }
        return parent::save($options); // TODO: Change the autogenerated stub
    }

}
